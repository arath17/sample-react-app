{"version":3,"sources":["authConfig.js","ui.jsx","App.jsx","index.js"],"names":["b2cPolicies","signIn","authority","changePassword","changeEmail","signup","msalConfig","auth","clientId","knownAuthorities","postLogoutRedirectUri","navigateToLoginRequestUrl","cache","cacheLocation","storeAuthStateInCookie","system","loggerOptions","loggerCallback","level","message","containsPii","LogLevel","Error","console","error","Info","info","Verbose","debug","Warning","warn","loginRequest","scopes","NavigationBar","instance","useMsal","className","Button","variant","onClick","loginPopup","DropdownButton","drop","title","Dropdown","Item","as","logoutPopup","mainWindowRedirectUri","logoutRedirect","loginRedirect","PageLayout","props","Navbar","bg","href","children","target","IdTokenClaims","id","idTokenClaims","aud","iss","oid","preferred_username","IdTokenContent","accounts","useState","setIdTokenClaims","name","MainContent","inProgress","apiData","useEffect","InteractionStatus","None","accessTokenRequest","account","acquireTokenSilent","then","accessTokenResponse","accessToken","log","catch","InteractionRequiredAuthError","acquireTokenPopup","App","msalInstance","PublicClientApplication","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bb06b4e1.chunk.js","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { LogLevel } from \"@azure/msal-browser\";\r\n\r\n/**\r\n * Enter here the user flows and custom policies for your B2C application\r\n * To learn more about user flows, visit: https://docs.microsoft.com/en-us/azure/active-directory-b2c/user-flow-overview\r\n * To learn more about custom policies, visit: https://docs.microsoft.com/en-us/azure/active-directory-b2c/custom-policy-overview\r\n */\r\nexport const b2cPolicies = {\r\n    names: {\r\n        signIn: \"b2c_1a_signin_scdf\",\r\n        changePassword: \"b2c_1a_change_password_scdf\",\r\n        changeEmail: \"b2c_1a_change_email_scdf\",\r\n        signup: \"b2c_1a_signup_scdf\"\r\n    },\r\n    authorities: {\r\n        signIn: {\r\n            authority: \"https://xIAMASPAC0.b2clogin.com/xIAMASPAC0.onmicrosoft.com/b2c_1a_signin_scdf\",\r\n        },\r\n        changePassword:{\r\n          authority: \"https://xIAMASPAC0.b2clogin.com/xIAMASPAC0.onmicrosoft.com/b2c_1a_change_password_scdf\"\r\n        },\r\n        changeEmail: {\r\n          authority: \"https://xIAMASPAC0.b2clogin.com/xIAMASPAC0.onmicrosoft.com/b2c_1a_change_email_scdf\"\r\n        },\r\n        signup: {\r\n            authority: \"https://xIAMASPAC0.b2clogin.com/xIAMASPAC0.onmicrosoft.com/b2c_1a_signup_scdf\"\r\n        }\r\n    },\r\n    authorityDomain: \"xIAMASPAC0.b2clogin.com\"\r\n}\r\n\r\n/**\r\n * Configuration object to be passed to MSAL instance on creation. \r\n * For a full list of MSAL.js configuration parameters, visit:\r\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/configuration.md \r\n */\r\nexport const msalConfig = {\r\n    auth: {\r\n        clientId: \"7433bc91-dca1-462a-ac1a-4106c8ace13d\", // This is the ONLY mandatory field that you need to supply.\r\n        authority: b2cPolicies.authorities.signIn.authority, // Use a sign-up/sign-in user-flow as a default authority\r\n        knownAuthorities: [b2cPolicies.authorityDomain], // Mark your B2C tenant's domain as trusted // Points to window.location.origin. You must register this URI on Azure Portal/App Registration.\r\n        postLogoutRedirectUri: \"/\", // Indicates the page to navigate after logout.\r\n        navigateToLoginRequestUrl: true, // If \"true\", will navigate back to the original request location before processing the auth code response.\r\n    },\r\n    cache: {\r\n        cacheLocation: \"sessionStorage\", // Configures cache location. \"sessionStorage\" is more secure, but \"scdfStorage\" gives you SSO between tabs.\r\n        storeAuthStateInCookie: false, // Set this to \"true\" if you are having issues on IE11 or Edge\r\n    },\r\n    system: {\t\r\n        loggerOptions: {\t\r\n            loggerCallback: (level, message, containsPii) => {\t\r\n                if (containsPii) {\t\t\r\n                    return;\t\t\r\n                }\t\t\r\n                switch (level) {\t\t\r\n                    case LogLevel.Error:\t\t\r\n                        console.error(message);\t\t\r\n                        return;\t\t\r\n                    case LogLevel.Info:\t\t\r\n                        console.info(message);\t\t\r\n                        return;\t\t\r\n                    case LogLevel.Verbose:\t\t\r\n                        console.debug(message);\t\t\r\n                        return;\t\t\r\n                    case LogLevel.Warning:\t\t\r\n                        console.warn(message);\t\t\r\n                        return;\t\t\r\n                }\t\r\n            }\t\r\n        }\t\r\n    }\r\n};\r\n\r\n/**\r\n * Scopes you add here will be prompted for user consent during sign-in.\r\n * By default, MSAL.js will add OIDC scopes (openid, profile, email) to any login request.\r\n * For more information about OIDC scopes, visit: \r\n * https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-permissions-and-consent#openid-connect-scopes\r\n */\r\nexport const loginRequest = {\r\n    scopes: []\r\n};\r\n\r\n/**\r\n * An optional silentRequest object can be used to achieve silent SSO\r\n * between applications by providing a \"login_hint\" property.\r\n */\r\nexport const silentRequest = {\r\n  scopes: [\"openid\", \"profile\"],\r\n  loginHint: \"example@domain.net\"\r\n};","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport React from \"react\";\r\n\r\nimport { AuthenticatedTemplate, UnauthenticatedTemplate, useMsal } from \"@azure/msal-react\";\r\n\r\nimport { Navbar, Button, Dropdown, DropdownButton} from \"react-bootstrap\";\r\n\r\nimport { loginRequest, b2cPolicies } from \"./authConfig\";\r\n\r\nconst NavigationBar = () => {\r\n\r\n    /**\r\n     * useMsal is hook that returns the PublicClientApplication instance, \r\n     * an array of all accounts currently signed in and an inProgress value \r\n     * that tells you what msal is currently doing. For more, visit:\r\n     * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/hooks.md\r\n     */\r\n    const { instance } = useMsal();\r\n\r\n    return (\r\n        <>\r\n            <AuthenticatedTemplate>\r\n                <div className=\"ml-auto\">\r\n                    <Button variant=\"info\" onClick={() => instance.loginPopup(b2cPolicies.authorities.changeEmail)} className=\"ml-auto\">Change Email</Button>\r\n                    <Button variant=\"info\" onClick={() => instance.loginPopup(b2cPolicies.authorities.changePassword)} className=\"ml-auto\">Change Password</Button>\r\n                    <DropdownButton variant=\"warning\" className=\"ml-auto\" drop=\"left\" title=\"Sign Out\">\r\n                        <Dropdown.Item as=\"button\" onClick={() => instance.logoutPopup({ postLogoutRedirectUri: \"/\", mainWindowRedirectUri: \"/\" })}>Sign out using Popup</Dropdown.Item>\r\n                        <Dropdown.Item as=\"button\" onClick={() => instance.logoutRedirect({ postLogoutRedirectUri: \"/\" })}>Sign out using Redirect</Dropdown.Item>\r\n                    </DropdownButton>\r\n                </div>\r\n            </AuthenticatedTemplate>\r\n            <UnauthenticatedTemplate>\r\n            <Button variant=\"info\" onClick={() => instance.loginPopup(b2cPolicies.authorities.signup)} className=\"ml-auto\">Sign Up</Button>\r\n                <DropdownButton variant=\"secondary\" className=\"ml-auto\" drop=\"left\" title=\"Sign In\">\r\n                    <Dropdown.Item as=\"button\" onClick={() => instance.loginPopup()}>Sign in using Popup</Dropdown.Item>\r\n                    <Dropdown.Item as=\"button\" onClick={() => instance.loginRedirect(loginRequest)}>Sign in using Redirect</Dropdown.Item>\r\n                </DropdownButton>\r\n            </UnauthenticatedTemplate>\r\n        </>\r\n    );\r\n};\r\n\r\nexport const PageLayout = (props) => {\r\n    return (\r\n        <>\r\n            <Navbar bg=\"primary\" variant=\"dark\">\r\n                <a className=\"navbar-brand\" href=\"/\">Microsoft identity platform</a>\r\n                <NavigationBar />\r\n            </Navbar>\r\n            <br />\r\n            <h5><center>Welcome to the Microsoft Authentication Library For React Tutorial</center></h5>\r\n            <br />\r\n            {props.children}\r\n            <br />\r\n            <AuthenticatedTemplate>\r\n                <footer>\r\n                    <center>How did we do?\r\n                        <a href=\"https://forms.office.com/Pages/ResponsePage.aspx?id=v4j5cvGGr0GRqy180BHbR73pcsbpbxNJuZCMKN0lURpUMlRHSkc5U1NLUkxFNEtVN0dEOTFNQkdTWiQlQCN0PWcu\" target=\"_blank\"> Share your experience!</a>\r\n                    </center>\r\n                </footer>\r\n            </AuthenticatedTemplate>\r\n        </>\r\n    );\r\n};\r\n\r\nexport const IdTokenClaims = (props) => {\r\n    return (\r\n        <div id=\"token-div\">\r\n            <p><strong>Audience: </strong> {props.idTokenClaims.aud}</p>\r\n            <p><strong>Issuer: </strong> {props.idTokenClaims.iss}</p>\r\n            <p><strong>OID: </strong> {props.idTokenClaims.oid}</p>\r\n            <p><strong>UPN: </strong> {props.idTokenClaims.preferred_username}</p>\r\n        </div>\r\n    );\r\n}","import React, { useState, useEffect } from \"react\";\r\n\r\nimport { MsalProvider, AuthenticatedTemplate, UnauthenticatedTemplate, useMsal } from \"@azure/msal-react\";\r\nimport { InteractionRequiredAuthError, InteractionStatus } from \"@azure/msal-browser\";\r\nimport { EventType, InteractionType } from \"@azure/msal-browser\";\r\n\r\nimport { msalConfig, b2cPolicies } from \"./authConfig\";\r\nimport { PageLayout, IdTokenClaims } from \"./ui.jsx\";\r\n\r\nimport Button from \"react-bootstrap/Button\";\r\nimport \"./styles/App.css\";\r\n\r\nconst IdTokenContent = () => {\r\n    /**\r\n     * useMsal is hook that returns the PublicClientApplication instance, \r\n     * an array of all accounts currently signed in and an inProgress value \r\n     * that tells you what msal is currently doing. For more, visit:\r\n     * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/hooks.md\r\n     */\r\n    const { accounts } = useMsal();\r\n    const [idTokenClaims, setIdTokenClaims] = useState(null);\r\n\r\n    function GetIdTokenClaims() {\r\n        setIdTokenClaims(accounts[0].idTokenClaims)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h5 className=\"card-title\">Welcome {accounts[0].name}</h5>\r\n            {idTokenClaims ?\r\n                <IdTokenClaims idTokenClaims={idTokenClaims} />\r\n                :\r\n                <Button variant=\"secondary\" onClick={GetIdTokenClaims}>View ID Token Claims</Button>\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\n/**\r\n * Most applications will need to conditionally render certain components based on whether a user is signed in or not. \r\n * msal-react provides 2 easy ways to do this. AuthenticatedTemplate and UnauthenticatedTemplate components will \r\n * only render their children if a user is authenticated or unauthenticated, respectively.\r\n */\r\n\r\nconst MainContent = () => {\r\n\r\n    const { instance, inProgress, accounts } = useMsal();\r\n    const [apiData] = useState(null);\r\n    /**\r\n     * Using the event API, you can register an event callback that will do something when an event is emitted. \r\n     * When registering an event callback in a react component you will need to make sure you do 2 things.\r\n     * 1) The callback is registered only once\r\n     * 2) The callback is unregistered before the component unmounts.\r\n     * For more, visit: https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/events.md\r\n     */\r\n     useEffect(() => {\r\n        if (!apiData && inProgress === InteractionStatus.None) {\r\n            const accessTokenRequest = {\r\n                scopes: [\"user.read\"],\r\n                account: accounts[0]\r\n            }\r\n            instance.acquireTokenSilent(accessTokenRequest).then((accessTokenResponse) => {\r\n                // Acquire token silent success\r\n                let accessToken = accessTokenResponse.accessToken;\r\n                console.log(accessToken);\r\n            }).catch((error) => {\r\n                if (error instanceof InteractionRequiredAuthError) {\r\n                    instance.acquireTokenPopup(accessTokenRequest).then(function(accessTokenResponse) {\r\n                        // Acquire token interactive success\r\n                        let accessToken = accessTokenResponse.accessToken;\r\n                        // Call your API with token\r\n                       console.log(accessToken);\r\n                    }).catch(function(error) {\r\n                        // Acquire token interactive failure\r\n                        console.log(error);\r\n                    });\r\n                }\r\n                console.log(error);\r\n            })\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AuthenticatedTemplate>\r\n                <IdTokenContent />\r\n            </AuthenticatedTemplate>\r\n\r\n            <UnauthenticatedTemplate>\r\n                <h5 className=\"card-title\">Please sign-in to see your profile information.</h5>\r\n            </UnauthenticatedTemplate>\r\n        </div>\r\n    );\r\n};\r\n\r\n/**\r\n * msal-react is built on the React context API and all parts of your app that require authentication must be \r\n * wrapped in the MsalProvider component. You will first need to initialize an instance of PublicClientApplication \r\n * then pass this to MsalProvider as a prop. All components underneath MsalProvider will have access to the \r\n * PublicClientApplication instance via context as well as all hooks and components provided by msal-react. For more,\r\n * visit: https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/getting-started.md\r\n */\r\nexport default function App({msalInstance}) {\r\n\r\n    return (\r\n        <MsalProvider instance={msalInstance}>\r\n            <PageLayout>\r\n                <MainContent />\r\n            </PageLayout>\r\n        </MsalProvider>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { PublicClientApplication } from \"@azure/msal-browser\";\r\n\r\nimport App from \"./App.jsx\";\r\nimport { msalConfig } from \"./authConfig\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./styles/index.css\";\r\n\r\n/**\r\n * MSAL should be instantiated outside of the component tree to prevent it from being re-instantiated on re-renders. \r\n * For more, visit: https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/getting-started.md\r\n */\r\nexport const msalInstance = new PublicClientApplication(msalConfig);\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App msalInstance={msalInstance}/>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}